import os
import streamlit as st
from langchain.embeddings import HuggingFaceEmbeddings
from langchain.vectorstores import FAISS
from langchain.text_splitter import CharacterTextSplitter
from langchain.document_loaders import PyPDFLoader
import pickle

# ƒê∆∞·ªùng d·∫´n th∆∞ m·ª•c ch·ª©a file PDF
DATA_DIR = "data"
VECTOR_DIR = "vectorstores"

os.makedirs(DATA_DIR, exist_ok=True)
os.makedirs(VECTOR_DIR, exist_ok=True)

st.set_page_config(page_title="Tr·ª£ L√Ω AI - An ninh C·∫£ng bi·ªÉn")
st.title("Tr·ª£ L√Ω AI - An ninh C·∫£ng bi·ªÉn")
st.markdown("---")

# Embedding model
embeddings = HuggingFaceEmbeddings(model_name="sentence-transformers/all-MiniLM-L6-v2")

# H√†m x·ª≠ l√Ω l·∫°i to√†n b·ªô file PDF th√†nh vector
def reload_all_data():
    pdf_files = [f for f in os.listdir(DATA_DIR) if f.endswith(".pdf")]
    for pdf_file in pdf_files:
        file_path = os.path.join(DATA_DIR, pdf_file)
        vector_path = os.path.join(VECTOR_DIR, pdf_file + ".pkl")

        if os.path.exists(vector_path):
            continue  # ƒê√£ c√≥ vector, b·ªè qua

        loader = PyPDFLoader(file_path)
        documents = loader.load()
        text_splitter = CharacterTextSplitter(chunk_size=1000, chunk_overlap=200)
        texts = text_splitter.split_documents(documents)

        db = FAISS.from_documents(texts, embeddings)
        with open(vector_path, "wb") as f:
            pickle.dump(db, f)

# UI - c·∫≠p nh·∫≠t d·ªØ li·ªáu
if st.button("üîÑ C·∫≠p nh·∫≠t d·ªØ li·ªáu"):
    with st.spinner("ƒêang x·ª≠ l√Ω d·ªØ li·ªáu..."):
        reload_all_data()
    st.success("‚úÖ D·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t!")

# Giao di·ªán ch·ªçn file
st.markdown("## üìÅ Ch·ªçn ngu·ªìn d·ªØ li·ªáu ƒë·ªÉ h·ªèi")
pdf_files = [f for f in os.listdir(DATA_DIR) if f.endswith(".pdf")]
selected_file = st.selectbox("Ch·ªçn file d·ªØ li·ªáu", pdf_files)

vector_path = os.path.join(VECTOR_DIR, selected_file + ".pkl")
if not os.path.exists(vector_path):
    st.warning("‚ùó B·∫°n c·∫ßn b·∫•m 'üîÑ C·∫≠p nh·∫≠t d·ªØ li·ªáu' ƒë·ªÉ t·∫°o vector cho file n√†y.")
else:
    st.success("‚úÖ D·ªØ li·ªáu ƒë√£ s·∫µn s√†ng ƒë·ªÉ h·ªèi.")
